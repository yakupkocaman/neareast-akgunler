@page
@model IndexModel
@{
    ViewData["Title"] = "Görevler";
}

@functions {
    public class IndexModel : PageBaseModel
    {
        public List<Job> Jobs;
        public List<Staff> Staffs;
        public List<Vehicle> Vehicles;
        public List<JobType> JobTypes;


        public JobCountModel Counts;
        public string CurrentSegment;
        public string CurrentSearch;
        public int CurrentVehicleId;
        public int CurrentStaffId;
        public int CurrentJobTypeId;
        public DateTime? CurrentStartDate = DateTime.Now.AddYears(-1);
        public string CurrentStartDateStr;
        public DateTime? CurrentEndDate = DateTime.Now.AddYears(1);
        public string CurrentEndDateStr;

        public int TablePageCount => (int)Math.Ceiling((double)TableItemsCount / (double)TableItemCount);
        public int TableItemCount;
        public int TableItemsCount;
        public int TableCurrentPage;

        public readonly IJobService mJobService;
        public readonly IVehicleService mVehicleService;
        public readonly IRepository<Staff> mStaffRepository;
        public readonly IRepository<JobType> mJobTypeRepository;

        public IndexModel(
            IJobService jobService,
            IVehicleService vehicleService,
            IRepository<Staff> staffRepository,
            IRepository<JobType> jobTypeRepository
        ) {
            mJobService = jobService;
            mVehicleService = vehicleService;
            mStaffRepository = staffRepository;
            mJobTypeRepository = jobTypeRepository;
        }

        public IActionResult OnGet(int p = 1, int c = 20, string q = "all", string s = "", int v = -1, int st = -1, int jt = -1, string sd = null, string ed = null)
        {
            if (!string.IsNullOrEmpty(sd))
            {
                CurrentStartDateStr = sd;
                CurrentStartDate = DateTime.ParseExact(sd, "dd/MM/yyyy", null);
            }

            if (!string.IsNullOrEmpty(ed))
            {
                CurrentEndDateStr = ed;
                CurrentEndDate = DateTime.ParseExact(ed, "dd/MM/yyyy", null);
            }

            TableCurrentPage = p;
            TableItemCount = c;

            CurrentSegment = q;
            CurrentSearch = s;
            CurrentVehicleId = v;
            CurrentStaffId = st;
            CurrentJobTypeId = jt;

            Counts = mJobService.GetJobCounts();

            var data = mJobService.GetPagedFull(TableCurrentPage, TableItemCount, CurrentSegment, CurrentSearch, CurrentVehicleId, CurrentStaffId, CurrentJobTypeId, CurrentStartDate, CurrentEndDate);
            TableItemsCount = data.Item1;
            Jobs = data.Item2;

            Staffs = mStaffRepository.Query().ToList().OrderBy(x => x.FullName).Prepend(new Staff { FirstName = "Tüm Sürücüler", Id = -1 }).ToList();

            Vehicles = mVehicleService.GetAllFull().OrderBy(x => x.RegistrationNo).ToList().Prepend(new Vehicle { Name = "Tüm Araçlar", Id = -1 }).ToList();

            JobTypes = mJobTypeRepository.Query().OrderBy(x => x.Name).ToList().Prepend(new JobType { Name = "Tüm Görevler", Id = -1 }).ToList();

            return Page();
        }

        [HttpGet]
        public IActionResult OnGetJobs(DataSourceLoadOptions loadOptions, string q = "all", string s = "", int v = -1, int st = -1, int jt = -1, string sd = null, string ed = null) {
			if (!string.IsNullOrEmpty(sd))
            {
                CurrentStartDateStr = sd;
                CurrentStartDate = DateTime.ParseExact(sd, "dd/MM/yyyy", null);
            }

            if (!string.IsNullOrEmpty(ed))
            {
                CurrentEndDateStr = ed;
                CurrentEndDate = DateTime.ParseExact(ed, "dd/MM/yyyy", null);
            }

            CurrentSegment = q;
            CurrentSearch = s;
            CurrentVehicleId = v;
            CurrentStaffId = st;
            CurrentJobTypeId = jt;

            Counts = mJobService.GetJobCounts();

            var query = mJobService.GetFullQueryable(CurrentSegment, CurrentSearch, CurrentVehicleId, CurrentStaffId, CurrentJobTypeId, CurrentStartDate, CurrentEndDate);

            return new OkObjectResult(DataSourceLoader.Load(query, loadOptions));
        }
    }
}

<div class="row grid-margin">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Görevler</h4>
                    <a class="btn btn-light btn-sm" asp-page="./edit">Yeni Ekle</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row grid-margin filter-panel report-header">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <form method="get">
                            <div class="d-flex">
                                <input type="hidden" name="p" value="1" />
                                <input type="hidden" name="c" value="@Model.TableItemCount" />
                                <input type="hidden" name="q" value="@Model.CurrentSegment" />
                                <input type="hidden" name="v" value="@Model.CurrentVehicleId" />
                                <input type="hidden" name="st" value="@Model.CurrentStaffId" />
                                <input type="hidden" name="jt" value="@Model.CurrentJobTypeId" />
                                <input type="hidden" name="sd" value="@Model.CurrentStartDateStr" />
                                <input type="hidden" name="ed" value="@Model.CurrentEndDateStr" />
                                <input type="text" class="form-control search-input" name="s" value="@Model.CurrentSearch" />
                                <button type="submit" class="add btn btn-primary font-weight-bold todo-list-add-btn"><i class="mdi mdi-magnify"></i></button>
                            </div>
                        </form>
                    </div>
                    <div class="col-md-2">
                        @(Html.DevExtreme().SelectBox()
                        .DisplayExpr("FullName")
                        .ValueExpr("Id")
                        .DataSource(Model.Staffs)
                        .Value(Model.CurrentStaffId)
                        .OnValueChanged("onStaffChanged")
                        )
                    </div>
                    <div class="col-md-2">
                        @(Html.DevExtreme().SelectBox()
                        .DisplayExpr("FullName")
                        .ValueExpr("Id")
                        .DataSource(Model.Vehicles)
                        .Value(Model.CurrentVehicleId)
                        .OnValueChanged("onVehicleChanged")
                        )
                    </div>
                    <div class="col-md-2">
                        @(Html.DevExtreme().SelectBox()
                        .DisplayExpr("Name")
                        .ValueExpr("Id")
                        .DataSource(Model.JobTypes)
                        .Value(Model.CurrentJobTypeId)
                        .OnValueChanged("onJobTypeChanged")
                        )
                    </div>
                    <div class="col-md-3">
                        <div id="reportrange" class="report-range">
                            <i class="mdi mdi-calendar-multiple"></i>&nbsp;
                            <span></span> <i class="mdi mdi-menu-down"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@(Html.DevExtreme().DataGrid<Job>()
    .DataSource(d => d.Mvc().Controller("Index").LoadParams(new { 
        Handler = "Jobs",
        q = Model.CurrentSegment, 
        s = Model.CurrentSearch, 
        v = Model.CurrentVehicleId, 
        st = Model.CurrentStaffId, 
        jt = Model.CurrentJobTypeId, 
        sd = Model.CurrentStartDateStr, 
        ed = Model.CurrentEndDateStr
    }).Key("Id"))
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id)
            .CssClass("col-middle")
			.SortOrder(SortOrder.Desc)
			.Alignment(HorizontalAlignment.Left)
			.Width(60)
            .AllowSorting(false)
            .CalculateCellValue(@<text>
                function(data) {
                    return [data.Id, data.Freights.length > 0]
                }
            </text>)
            .CellTemplate(@<text>
                <div class="text-right">
                    <% if (data.Freights && data.Freights.length > 0) { %> 
                    <i style="font-size: 140%" class="link-icon mdi mdi-call-merge"></i>
                    <% } %>
                    <%- data.Id %>
                </div>
            </text>)
			.Caption("Id");

        columns.AddFor(m => m.StartDate)
            .CssClass("col-middle")
            .EncodeHtml(false)
            .AllowSorting(false)
			.Width(140)
            .CalculateCellValue(@<text>
                function(data) {
                    return [data.StartDate ? moment(data.StartDate).format("DD/MM/YYYY HH:mm") : '', data.FinishDate ? moment(data.FinishDate).format("DD/MM/YYYY HH:mm") : ''].join("<br>")
                }
            </text>)
			.Caption("Başlangıç-Bitiş");

        columns.AddFor(m => m.Sender)
            .CssClass("col-middle")
            .EncodeHtml(false)
            .AllowSorting(false)
            .CalculateCellValue(@<text>
                function(data) {
                    return [data.Sender?.Name, data.Receiver?.Name].join("<br>")
                }
            </text>)
			.Caption("Müşteri");

        columns.AddFor(m => m.Staff)
            .CssClass("col-middle")
            .EncodeHtml(false)
            .AllowSorting(false)
			.Width(140)
            .CalculateCellValue(@<text>
                function(data) {
                    if(data.Staff != null) {
                        return data.Staff?.FullName
                    }
                    return '-';
                }
            </text>)
			.Caption("Sürücü");

        columns.AddFor(m => m.Tractor)
            .CssClass("col-middle")
            .EncodeHtml(false)
            .AllowSorting(false)
			.Width(140)
            .CalculateCellValue(@<text>
                function(data) {
                    var vehicles = [];
                    var tractor = data.Tractor;
                    var trailer = data.Trailer;
                    var vehicle = "";

                    if(tractor) {
                        if(tractor.RegistrationNo) {
                            vehicle += tractor.RegistrationNo;
                        }
                        if(tractor.Make && tractor.Make.Name) {
                            vehicle += " " + tractor.Make.Name;
                        }
                    }

                    if(vehicle.length > 0) {
                        vehicles.push(vehicle);
                    }

                    return vehicles.join("<br>")
                }
            </text>)
			.Caption("Çekici");

        columns.AddFor(m => m.Trailer)
            .CssClass("col-middle")
            .EncodeHtml(false)
            .AllowSorting(false)
			.Width(140)
            .CalculateCellValue(@<text>
                function(data) {
                    var vehicles = [];
                    var tractor = data.Tractor;
                    var trailer = data.Trailer;
                    var vehicle = "";

                    if(trailer) {
                        if(trailer.RegistrationNo) {
                            vehicle += trailer.RegistrationNo;
                        }
                        if(trailer.VehicleType && trailer.VehicleType.Name) {
                            vehicle += " " + trailer.VehicleType.Name;
                        }
                    }

                    if(vehicle.length > 0) {
                        vehicles.push(vehicle);
                    }

                    return vehicles.join("<br>")
                }
            </text>)
			.Caption("Dorse ");
        
        columns.AddFor(m => m.Freights)
            .CssClass("col-middle")
            .EncodeHtml(false)
            .AllowSorting(false)
            .CalculateCellValue(@<text>
                function(data) {
                    var freights = [];
                    var jobFreights = data.Freights;

                    if(jobFreights && jobFreights.length > 0) {
                        for(var jobFreight of jobFreights) {
                            freights.push(jobFreight.ShippingDistrict?.Province?.Name + " - " + jobFreight.ShippingDistrict?.Name)
                        }
                    }

                    return freights.join("<br>")
                }
            </text>)
			.Caption("Yükleme Yerleri");

        columns.AddFor(m => m.Status)
            .Width(80)
            .CssClass("col-middle")
			.Caption("Durum");
    })
    .FilterRow(f => f.Visible(false))
    .HeaderFilter(f => f.Visible(false))
    .GroupPanel(p => p.Visible(false))
    .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
	.Paging(paging => paging.PageSize(10))
    .Pager(pager => {
        pager.Visible(true);
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new JS("[10, 20, 50]"));
        pager.ShowNavigationButtons(true);
    })
	.Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .ShowBorders(true)
	.ShowRowLines(true)
    .Grouping(g => g.AutoExpandAll(false))
	.OnSelectionChanged("onSelectionChanged")
    .OnCellPrepared("onCellPrepared")
	.NoDataText("Veri bulunamadı")
)

@(Html.DevExtreme().Tooltip()
    .ID("tooltip")
    .Position(Position.Right)
)

<script>
    function onSelectionChanged(selectedItems) {
        var data = selectedItems.selectedRowsData[0];
        if(data) {
			window.location.href = baseUrl + "jobs/edit?id=" + data.Id;
        }
    }

    function onCellPrepared(e) {
        if (e.rowType === "data" && e.column.dataField === "Id" && e.data.Freights && e.data.Freights.length > 0) {
            var tooltipInstance = $("#tooltip").dxTooltip("instance");
            e.cellElement.mouseover(function (arg) {
                tooltipInstance.option("contentTemplate", function (contentElement) {
                    contentElement.html(`<div class='tooltipContent'><b style="font-size: 110%">Parsiyel Yük</b></div>`);
                });
                tooltipInstance.show(arg.target);
            });
            e.cellElement.mouseout(function (arg) {
                tooltipInstance.hide();
            });
        }
    }
</script>

@section Scripts {
<script>
    function onStaffChanged(data) {
        val = data.value;
        location.href = baseUrl + "jobs/index?p=1&c=@Model.TableItemCount&q=@Model.CurrentSegment&s=@Model.CurrentSearch&v=@Model.CurrentVehicleId&st="+val+"&jt=@Model.CurrentJobTypeId&sd=@Model.CurrentStartDateStr&ed=@Model.CurrentEndDateStr";
    }

    function onVehicleChanged(data) {
        val = data.value;
        location.href = baseUrl + "jobs/index?p=1&c=@Model.TableItemCount&q=@Model.CurrentSegment&s=@Model.CurrentSearch&v="+val+"&st=@Model.CurrentStaffId&jt=@Model.CurrentJobTypeId&sd=@Model.CurrentStartDateStr&ed=@Model.CurrentEndDateStr";
    }

    function onJobTypeChanged(data) {
        val = data.value;
        location.href = baseUrl + "jobs/index?p=1&c=@Model.TableItemCount&q=@Model.CurrentSegment&s=@Model.CurrentSearch&v=@Model.CurrentVehicleId&st=@Model.CurrentStaffId&jt="+val+"&sd=@Model.CurrentStartDateStr&ed=@Model.CurrentEndDateStr";
    }

    function onItemCountChanged(data) {
        val = data.value;
        location.href = baseUrl + "jobs/index?p=1&c=" + val +"&q=@Model.CurrentSegment&s=@Model.CurrentSearch&v=@Model.CurrentVehicleId&st=@Model.CurrentStaffId&jt=@Model.CurrentJobTypeId&sd=@Model.CurrentStartDateStr&ed=@Model.CurrentEndDateStr";
    }

    var isFirst = true;
    var start = moment('@(Model.CurrentStartDate?.ToString("dd/MM/yyyy"))', 'DD/MM/YYYY');
    var end = moment('@(Model.CurrentEndDate?.ToString("dd/MM/yyyy"))', 'DD/MM/YYYY');

    $(function () {
        function cb(start, end) {

            $('#reportrange span').html(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));

            if (isFirst) {
                isFirst = false;
            }
            else {
                location.href = baseUrl + "jobs/index?p=1&c=@Model.TableItemCount&q=@Model.CurrentSegment&s=@Model.CurrentSearch&v=@Model.CurrentVehicleId&st=@Model.CurrentStaffId&jt=@Model.CurrentJobTypeId&sd=" + start.format('DD/MM/YYYY') + "&ed=" + end.format('DD/MM/YYYY');
            }
        }

        $('#reportrange').daterangepicker({
            startDate: start,
                endDate: end,
                opens: 'left',
                ranges: {
                'Bugün': [moment(), moment()],
                    'Dün': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Son 7 Gün': [moment().subtract(6, 'days'), moment()],
                    'Son 30 Gün': [moment().subtract(29, 'days'), moment()],
                    'Bu Ay': [moment().startOf('month'), moment().endOf('month')],
                    'Geçen Ay': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                    'Tüm Zamanlar': [moment("20180101", "YYYYMMDD").startOf('month'), moment().add(1, 'year').endOf('month')]
                },
                "locale": {
                    "format": "DD/MM/YYYY",
                    "separator": " - ",
                    "applyLabel": "Uygula",
                    "cancelLabel": "Vazgeç",
                    "fromLabel": "Dan",
                    "toLabel": "a",
                    "customRangeLabel": "Tarih Aralığı",
                    "daysOfWeek": ["Pz", "Pt", "Sl", "Çr", "Pr", "Cm", "Ct"],
                    "monthNames": ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
                    "firstDay": 1
                }
            }, cb);

            cb(start, end);

    });

</script>
}